console.log("кот" > "код"); //кодировка Unicode код символа "т" > "д"
console.log("2" + 2 * "2" ); // 24, так как в приоритете умножение, 2*"2" будет 4, строка станет числом, затем бинарный +, который
//все переведет в строку и сконкотенирует
console.log(undefined == null );//типы преобразуются и получается такое выражение false == false, что истино
console.log(undefined != null);//типы преобразуются и получается такое выражение false != false, что ложно
console.log(null == 0);//типы преобразуются и получается, что null не равен number
console.log(2 > "3");//преобразуется в число, а 3 > 2
console.log(null - false + true);//0-0+1=1
console.log(1 / "l");//не возможно преобразовать типы, следовательно это - ошибочная операция, поэтому получим NaN
console.log("2" * "3");//оператор * преобразует в число, поэтому 2*3=6
console.log(4 + 5 + "O");//первый + между числами, поэтому будет число 9, потом бинарный + получается строка 9О
console.log("l" + 4 + 5);//первый + между строкой и числом => бинарный, получается строка l4, второй + 
//между строкой и числом => бинарный, поэтому строка l45
console.log("4" - 2);//унарный минус преобразует в число, поэтому числа 4-2=2
console.log("4" - "4x");//унарный минус преобразует в число => число 4 - строка, ошибочная операция, получим NaN
console.log("23" == 23);//преобразование типов строка в число, поэтому числа 23=23
console.log(null == false);//преобразование типов, получается, что null не равен boolean
console.log(" -4 "/ 0 + 1);//отрицательная бесконечность так как преобразованную строку -4 в число -4 делим на 0
console.log(null + 1);//0+1=1
console.log(undefined + null);//неопределенное/неполученное значение + 0, ошибочная операция, вернет NaN
console.log(1 === "1");//строгое равенство, типы не преобразуются, поэтому число не равно строке
console.log("2" > 10);//преобразование типов строка в число, поэтому 2 не больше 10
console.log(NaN == undefined);//ошибочная операция не равна неопределенному/неполученному значению, поэтому false